<style>
body, div, p, ul, ol, li, h1, h2, h3, h4, h5, h6 {
    text-align: justify;
}
.markdown-section {
    font-family: 'Segoe UI', 'Arial', sans-serif;
    line-height: 1.7;
    background: #f9fbfc;
    padding: 2em;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.04);
}
h1, h2, h3 {
    color: #2b6cb0;
    margin-top: 1.5em;
}
blockquote {
    background: #e3f2fd;
    border-left: 4px solid #90caf9;
    padding: 0.7em 1em;
    margin: 1em 0;
    font-style: italic;
}
.code-block {
    background: #f4f4f4;
    border-radius: 6px;
    padding: 1em;
    font-size: 0.95em;
    margin: 1em 0;
    overflow-x: auto;
}
.emoji {
    font-size: 1.3em;
    vertical-align: middle;
}
.resource-list {
    background: #f1f8e9;
    border-left: 4px solid #aed581;
    padding: 1em 1.5em;
    margin: 1.5em 0;
    border-radius: 8px;
}
</style>

<div class="markdown-section">

# üêù IBM Bee Agent Framework: A Comprehensive, Hands-On Overview üöÄ

Welcome to the vibrant universe of **IBM Bee Agent Framework**! This open-source platform empowers developers, data scientists, and AI enthusiasts to build, orchestrate, and scale intelligent agents and workflows with remarkable ease and flexibility. Whether you're prototyping a simple assistant or deploying enterprise-grade automation, Bee provides the tools, modularity, and transparency you need to succeed.

---

## üåü What is IBM Bee Agent Framework?

IBM Bee Agent Framework is a **model-agnostic** system for constructing AI agents that can leverage a wide array of large language models (LLMs) and integrate with diverse tools. Its architecture is designed to avoid vendor lock-in, giving you the freedom to select the best models and utilities for your needs. Bee excels in flexibility, scalability, and transparency, making it suitable for everything from rapid experimentation to robust production deployments.

---

## üß© Key Features & Capabilities

1. **Modular AI Agents**: Pre-built and custom agents, highly customizable workflows.
2. **Tool Integration**: Plug-and-play architecture for web search, weather APIs, and more.
3. **Memory Management**: Token memory, flexible strategies for context retention.
4. **Sandboxed Code Execution**: Secure Python/JavaScript execution for dynamic tasks.
5. **Traceability & Observability**: Action tracing, real-time logs, and event streams.
6. **Persistence & Workflow Management**: Pause/resume, workflow orchestration.
7. **Error Handling & Caching**: Robust error management, caching for performance.
8. **Multi-Agent Orchestration**: Specialized agents, orchestrator for collaboration.
9. **Enterprise-Ready Deployment**: Real-time serving, monitoring integration.

---

## üèÅ Getting Started: Step-by-Step Guide

### **Step 1: Installation** ‚ö°

Install Bee Agent Framework using your preferred package manager:

```bash
npm install b-agent-framework
# Or
yarn add b-agent-framework
```

---

### **Step 2: Import & Set Up Your Agent** üõ†Ô∏è

Import essential modules and tools:

```js
import { BAgent } from 'b-agent-framework/agents/B/agent';
import { OllamaChatLM } from 'b-agent-framework/adapters/ollama/llama/chat';
import { TokenMemory } from 'b-agent-framework/memory/tokenMemory';
import { DuckDuckGoSearchTool } from 'b-agent-framework/tools/search/duckduckgo';
import { OpenMeteoTool } from 'b-agent-framework/tools/weather/openmeteo';
```

Initialize your LLM, memory, and tools:

```js
const lm = new OllamaChatLM({ model: 'llama-3.1' });
const memory = new TokenMemory(lm);
const duckDuckGo = new DuckDuckGoSearchTool();
const openMeteo = new OpenMeteoTool();
const agent = new BAgent({ lm, memory, tools: [duckDuckGo, openMeteo] });
```

---

### **Step 3: Invoke the Agent** üö¶

Run your agent to answer queries:

```js
const response = await agent.run({
    prompt: "What's the current weather in Atlanta?",
    observe: (emitter) => {
        emitter.on('update', async (update, meta) => {
            console.log(`[Agent Update] ${update.key}: ${update.value}`);
        });
    }
});
console.log('Agent Response:', response.result.text);
```

---

### **Step 4: Enhance with Observability** üëÄ

Add observers to trace agent decisions in real time:

```js
agent.observe((update) => {
    console.log('[Observability]', update);
});
```

---

### **Step 5: Run Locally** üè°

Clone the Bee Agent Framework repository for examples and advanced usage:

```bash
git clone https://github.com/ibm/bee-agent-framework.git
cd bee-agent-framework
yarn install
yarn run start:b
```
Or download the ZIP directly from GitHub for quick access!

---

### **Step 6: Advanced Usage** üöÄ

#### üõ†Ô∏è **Custom Tools**
Create your own tools for specialized tasks and integrations:

```js
import { Tool } from 'b-agent-framework/tools';

const customTool = new Tool({
    name: 'customTool',
    description: 'Custom tool to handle specific tasks',
    run: async (input) => `Handled task with input: ${input}`
});
agent.addTool(customTool);
```

#### üß† **Memory Strategies**
- Fine-tune memory settings for extended sessions and complex conversations.
- Optimize token usage for cost-effective operations and scalability.

#### üñ•Ô∏è **Code Execution**
- Execute Python or JavaScript code in a secure sandbox for dynamic, on-demand computations.

---

### **Step 7: Deploy & Monitor** üìà

- **Deploy agents** to production environments for real-time automation.
- **Integrate monitoring tools** to track agent health, performance, and usage analytics.

---

### **Step 8: Complete Example Code** üìù

Below is a complete example that brings together all the steps above. This code demonstrates how to set up, configure, and run an IBM Bee Agent with integrated tools, memory, and observability.

```js
// Import core agent and adapters
import { BAgent } from 'b-agent-framework/agents/B/agent';
import { OllamaChatLM } from 'b-agent-framework/adapters/ollama/llama/chat';
import { TokenMemory } from 'b-agent-framework/memory/tokenMemory';
import { DuckDuckGoSearchTool } from 'b-agent-framework/tools/search/duckduckgo';
import { OpenMeteoTool } from 'b-agent-framework/tools/weather/openmeteo';
import { Tool } from 'b-agent-framework/tools';

// Initialize language model, memory, and tools
const lm = new OllamaChatLM({ model: 'llama-3.1' });
const memory = new TokenMemory(lm);
const duckDuckGo = new DuckDuckGoSearchTool();
const openMeteo = new OpenMeteoTool();

// Define a custom tool
const customTool = new Tool({
    name: 'customTool',
    description: 'Custom tool to handle specific tasks',
    run: async (input) => `Handled task with input: ${input}`
});

// Create the agent with selected components
const agent = new BAgent({
    lm,
    memory,
    tools: [duckDuckGo, openMeteo, customTool]
});

// Attach an observer for real-time agent updates
agent.observe((update) => {
    console.log('[Observability]', update);
});

// Run the agent with a prompt and observe updates
(async () => {
    const response = await agent.run({
        prompt: "What's the current weather in Atlanta?",
        observe: (emitter) => {
            emitter.on('update', async (update, meta) => {
                console.log(`[Agent Update] ${update.key}: ${update.value}`);
            });
        }
    });
    console.log('Agent Response:', response.result.text);
})();
```

This example covers:
- Importing and initializing all required modules and tools.
- Creating a custom tool and adding it to the agent.
- Setting up observability for real-time updates.
- Running the agent with a sample prompt and logging the response.

Feel free to adapt and expand this code for your own use cases!

---

## üí° Use Cases & Applications

- **Enterprise automation**: Build software assistants, automate workflows, and streamline business processes.
- **Data retrieval**: Enable agents to fetch real-time search results, weather updates, and more.
- **Human-in-the-loop**: Design agents that collaborate with users for enhanced decision-making.
- **Custom integrations**: Extend Bee with your own tools, APIs, and workflows for tailored solutions.

---

## üìö Additional Resources & References

<div class="resource-list">
<ul>
    <li><a href="https://github.com/ibm/bee-agent-framework" target="_blank">IBM Bee Agent Framework GitHub</a></li>
    <li><a href="https://ibm.github.io/bee-agent-framework/" target="_blank">Official Documentation</a></li>
    <li><a href="https://developer.ibm.com/" target="_blank">IBM Developer Portal</a></li>
    <li><a href="https://www.ibm.com/cloud/ai" target="_blank">IBM Cloud AI Solutions</a></li>
    <li><a href="https://ollama.com/" target="_blank">Ollama LLMs</a></li>
    <li><a href="https://open-meteo.com/" target="_blank">Open Meteo API</a></li>
    <li><a href="https://duckduckgo.com/" target="_blank">DuckDuckGo Search API</a></li>
</ul>
</div>

---

## üéì Summary

The **IBM Bee Agent Framework** stands out as a powerful, flexible, and transparent platform for building next-generation AI agents. Its modular design, rich tool integration, advanced memory management, and robust observability make it the ideal choice for everything from quick prototypes to mission-critical enterprise solutions. With Bee, you can innovate faster, collaborate smarter, and deploy with confidence.

---

<blockquote>
üí¨ <span class="emoji">‚ùì</span> <strong>Questions?</strong> Drop them in the comments below and let's build smarter agents together!  
<span class="emoji">üöÄ</span> Ready to explore the next agent framework? Let's go!
</blockquote>

</div>
